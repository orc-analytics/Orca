syntax="proto3";


option go_package = "github.com/orc-analytics/orca/protobufs/go";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "vendor/validate.proto";

// OrcaCore is the central orchestration service that:
// - Manages the lifecycle of processing windows
// - Coordinates algorithm execution across distributed processors
// - Tracks DAG dependencies and execution state
// - Routes results between dependent algorithms
service OrcaCore {
  // ------------------- Core operations ------------------- 

  // Register a processor node and its supported algorithms
  rpc RegisterProcessor(ProcessorRegistration) returns (Status);

  // Submit a window for processing
  rpc EmitWindow(Window) returns (WindowEmitStatus);

  // ------------------- Data operations ------------------- 
  rpc ReadWindowTypes(WindowTypeRead) returns (WindowTypes);
  rpc ReadAlgorithms(AlgorithmsRead) returns (Algorithms);
  rpc ReadProcessors(ProcessorsRead) returns (Processors);
  rpc ReadResultsStats(ResultsStatsRead) returns (ResultsStats);
  rpc ReadResultFieldsForAlgorithm(AlgorithmFieldsRead) returns (AlgorithmFields);
  rpc ReadResultsForAlgorithm(ResultsForAlgorithmRead) returns (ResultsForAlgorithm);
  rpc ReadWindows(WindowsRead) returns (Windows);
  rpc ReadDistinctMetadataForWindowType(DistinctMetadataForWindowTypeRead) returns (DistinctMetadataForWindowType);
  rpc ReadWindowsForMetadata(WindowsForMetadataRead) returns (WindowsForMetadata);
  rpc ReadResultsForAlgorithmAndMetadata(ResultsForAlgorithmAndMetadataRead) returns (ResultsForAlgorithmAndMetadata);

  // ------------------ Annotation operations ----------------- 
  rpc Annotate(AnnotateWrite) returns (AnnotateResponse);
}

// OrcaProcessor defines the interface that each processing node must implement.
// Processors are language-agnostic services that:
// - Execute individual algorithms
// - Handle their own internal state
// - Report results back to the orchestrator
// Orca will schedule processors asynchronously as per the DAG
service OrcaProcessor {
  // Execute part of a DAG with streaming results
  // Server streams back execution results as they become available
  rpc ExecuteDagPart(ExecutionRequest) returns (stream ExecutionResult);

  // Check health/status of processor. i.e. a heartbeat
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Window represents a time-bounded processing context that triggers algorithm execution. Windows are the primary input that start DAG processing flows.
message Window {
  // Time that the window starts - nanoseconds since epoch
  // Required: Must be > Unix epoch (1970-01-01T00:00:00Z)
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}  // Unix epoch
    }
  }];

  // Time that the window ends - nanoseconds since epoch
  // Required: Must be > time_from (validated at message level)
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}  // Also must be > Unix epoch
    }
  }];
  
  // The canonical name of the window that uniquely identifies it
  string window_type_name = 3 [(buf.validate.field) = {
    required: true,
    string: {min_len: 1}  // Ensure non-empty
  }];

  // The version of the window type
  string window_type_version = 4 [(buf.validate.field) = {
    required: true,
    string: {min_len: 1}  // Ensure non-empty
  }];

  // A unique identifier that defines where the window came from
  string origin = 5 [(buf.validate.field) = {
    required: true,
    string: {min_len: 1}  // Ensure non-empty
  }];
  
  // Additional metadata to attach to this window
  google.protobuf.Struct metadata = 6;

  // Ensure time_to is after time_from
  option (buf.validate.message).cel = {
    id: "window.time_ordering",
    message: "time_to must be greater than time_from",
    expression: "this.time_to > this.time_from"
  };
}
// WindowType defines a category of window that can trigger algorithms.
// Algorithms subscribe to window types to indicate when they should be executed.
message WindowType {
  // Name of the window type - must be globally unique
  // Examples: "daily", "hourly", "market_close", "event_triggered"
  string name = 1 [(buf.validate.field).required = true];

  // Version of the algorithm. Follows basic semver and allows window
  // types to be changed over time, with traceability
  string version = 2 [(buf.validate.field).required=true];

  // Description of the window
  // E.g. "Emitted every day, at noon"
  string description = 3 [(buf.validate.field).required=true];
}

message WindowEmitStatus {

  // A status enum that captures scenarios regarding a window being emmited
  enum StatusEnum {
    // When no algorithms could be found that are triggered by this window
    NO_TRIGGERED_ALGORITHMS = 0;

    // When processing has successfully been triggered
    PROCESSING_TRIGGERED = 1;

    // When triggering has failed
    TRIGGERING_FAILED = 2;
  }
  StatusEnum status = 1 [(buf.validate.field).required = true];
}

// AlgorithmDependency defines a requirement that one algorithm has on another's results.
// These dependencies form the edges in the processing DAG.
message AlgorithmDependency {
  // Name of the required algorithm
  // Must reference an existing algorithm name in the system
  string name = 1 [(buf.validate.field).required = true];

  // Version of the required algorithm
  // Must follow semantic versioning (e.g., "1.0.0")
  string version = 2 [(buf.validate.field).required = true];

  // Name of the processor that the algorithm is associated with
  string processor_name = 3 [(buf.validate.field).required = true];

  // Runtime of the processor that the algorithm is associated with
  string processor_runtime = 4 [(buf.validate.field).required = true];
}

enum ResultType {
  // placeholder sentinel to make explicit that nothing was provided 
  NOT_SPECIFIED = 0;

  // the algorithm produces a struct result
  STRUCT = 1;

  // the algorithm produces a single value
  VALUE = 2;
  
  // the algorithm produces an array of values
  ARRAY = 3;

  // the algorithm does not produce a result
  NONE = 4;
}

// Algorithm defines a processing unit that can be executed by processors.
// Algorithms form the nodes in the processing DAG and are triggered by specific window types.
message Algorithm {
  // Name of the algorithm - must be globally unique
  // This identifies the algorithm across the system
  string name = 1 [(buf.validate.field).required = true];

  // Version of the algorithm - must follow semantic versioning
  // Allows for algorithm evolution while maintaining compatibility
  string version = 2 [(buf.validate.field).required = true];

  // Type of window that triggers this algorithm
  // References a WindowType that will cause this algorithm to execute
  WindowType window_type = 3 [(buf.validate.field).required = true];

  // Other algorithms that this algorithm depends on
  // The algorithm won't execute until all dependencies have completed
  // Dependencies must not form cycles - this is statically checked on processor registration
  repeated AlgorithmDependency dependencies = 4;
  
  // The type of result that the algorithm produces. This is specified upfront
  // rather than introspected, to allow for validation
  ResultType result_type = 5 [(buf.validate.field).required = true];  
}

// ResultStatus indicates the outcome of algorithm execution
enum ResultStatus {
  // Algorithm failed but the error was handled gracefully
  // The system may retry or skip depending on configuration
  RESULT_STATUS_HANDLED_FAILED = 0;

  // Algorithm failed with an unexpected error
  // Requires investigation and may halt dependent processing
  RESULT_STATUS_UNHANDLED_FAILED = 1;

  // Algorithm completed successfully
  // Results are valid and can be used by dependent algorithms
  RESULT_STATUS_SUCEEDED = 2;
}

// Container for array of float values
message FloatArray {
  repeated float values = 1;
}

// Result of an algorithm execution
message Result {
  // Status of the result execution
  ResultStatus status = 1 [(buf.validate.field).required = true];

  // The actual result data - can be either an array of floats or a structured object
  oneof result_data {
    // for single number results
    float single_value = 2;

    // For numeric array results
    FloatArray float_values = 3;
    
    // For structured data results (JSON-like)
    // Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
    google.protobuf.Struct struct_value = 4;
  }

  // Timestamp when the result was produced
  int64 timestamp = 5 [(buf.validate.field).required = true];
}


// ProcessorRegistration is sent by processors when they start up to announce their capabilities
// to the orchestrator. This establishes a long-lived connection for receiving tasks.
message ProcessorRegistration {
  // Unique name of the runtime
  string name = 1 [(buf.validate.field).required = true];

  // Language/runtime of the processor
  // Examples: "python3.9", "go1.19", "Rust4.1"
  string runtime = 2 [(buf.validate.field).required = true];

  // The connection string of the processor 
  // e.g. grpc://localhost:5433
  string connection_str = 3 [(buf.validate.field).required = true];

  // Algorithms this processor can execute
  // The processor must implement all listed algorithms
  repeated Algorithm supported_algorithms = 4 [(buf.validate.field).required = true];
}

// ProcessingTask represents a single algorithm execution request sent to a processor.
// Tasks are streamed to processors as their dependencies are satisfied.
message ProcessingTask {
  // Unique ID for this specific task execution
  // Used to correlate results and track execution state
  string task_id = 1 [(buf.validate.field).required = true];

  // Algorithm to execute
  // Must be one of the algorithms the processor registered support for
  Algorithm algorithm = 2 [(buf.validate.field).required = true];

  // Window that triggered this task
  // Provides the time context for the algorithm execution
  Window window = 3 [(buf.validate.field).required = true];

  // Results from dependent algorithms
  // Contains all results that this algorithm declared dependencies on
  // All dependencies will be present when task is sent
  repeated Result dependency_results = 4;
}

// ExecutionRequest provides a complete view of a processing DAG's execution
// status for a specific window. Used for monitoring and debugging.
message ExecutionRequest {
  // The exec_id
  string exec_id = 1 [(buf.validate.field).required = true];

  // The window that triggered the algorithm 
  Window window = 2 [(buf.validate.field).required = true];
  
  // Results from dependant algorithms
  repeated AlgorithmResult algorithm_results = 3;

  // The algorithms to execute
  repeated Algorithm algorithms = 4;
}

message ExecutionResult {
  // Exec ID
  string exec_id = 1 [(buf.validate.field).required = true];
  
  // The algorithn result
  AlgorithmResult algorithm_result = 3 [(buf.validate.field).required = true];
}


// AlgorithmWindowResult Packaged algorithm and result to a window
message AlgorithmResult {
  Algorithm algorithm = 1 [(buf.validate.field).required=true];
  Result result = 2 [(buf.validate.field).required=true];
}

message Status {
  bool received = 1;
  string message = 2;
}

// HealthCheckRequest is sent to processors to verify they are functioning
message HealthCheckRequest {
  // Timestamp of the request in unix epoch milliseconds
  // Used to measure response latency
  int64 timestamp = 1 [(buf.validate.field).required = true];
}

// HealthCheckResponse indicates the health status of a processor
message HealthCheckResponse {
  // Overall health status of the processor
  enum Status {
    // Unknown status - should never be used
    STATUS_UNKNOWN = 0;
    // Processor is healthy and ready to accept tasks
    STATUS_SERVING = 1;
    // Processor is starting up or shutting down
    STATUS_TRANSITIONING = 2;
    // Processor is not healthy and cannot accept tasks
    STATUS_NOT_SERVING = 3;
  }
  
  // Current health status
  Status status = 1 [(buf.validate.field).required = true];

  // Optional message providing more detail about the health status
  string message = 2;

  // System metrics about the processor
  ProcessorMetrics metrics = 3;
}

// ProcessorMetrics provides runtime information about a processor
message ProcessorMetrics {
  // Number of algorithms currently being executed
  int32 active_tasks = 1;

  // Memory usage in bytes
  int64 memory_bytes = 2;

  // CPU usage percentage (0-100)
  float cpu_percent = 3;

  // Time since processor started in seconds
  int64 uptime_seconds = 4;
}

// ---------------------------- Data Messages ----------------------------
//
message WindowTypeRead {}

message WindowTypes {
  repeated WindowType windows = 1; 
}

message AlgorithmsRead {}

message Algorithms {
  repeated Algorithm algorithm = 1; 
}

message ProcessorsRead {}

message Processors {
  message Processor {
    string name = 1;
    string runtime = 2;
  }
  repeated Processor processor = 1;
}

message ResultsStatsRead {}

message ResultsStats {
  int64 Count = 1;
}

message AlgorithmFieldsRead {
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];

  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];

  Algorithm algorithm = 3 [(buf.validate.field).required = true];
}

message AlgorithmFields {
  repeated string field = 1;
};

message ResultsForAlgorithmRead {

  // the time to read results from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];

  // the time to read results to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the algorithm to read results for
  Algorithm algorithm = 3 [(buf.validate.field).required = true];
}

message ResultsForAlgorithm {
  message ResultsRow {
    
    // the time of the result, being the center of the triggering window
    google.protobuf.Timestamp time = 1 [(buf.validate.field) = {
      required: true,
      timestamp: {
        gt: {seconds: 0, nanos: 0}
      }
    }];

    // the result packet is one of these
    oneof result_data {
      // for single number results
      float single_value = 2;

      // For numeric array results
      FloatArray array_values = 3;
      
      // For structured data results (JSON-like)
      // Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
      google.protobuf.Struct struct_value = 4;
    }
  }
  repeated ResultsRow results = 1;
} 


message WindowsRead {
  
  // the time to read windows from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the time to read windows to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the window
  WindowType window = 3 [(buf.validate.field).required = true];
}

message Windows {
  // the windows
  repeated Window window = 1;
}


message DistinctMetadataForWindowTypeRead {
  // the time to read windows from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the time to read windows to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];

  // the window type to read
  WindowType window_type = 3;
}

message DistinctMetadataForWindowType {
  google.protobuf.ListValue metadata = 1;
}


message WindowsForMetadataRead {
  
  // the time to read windows from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the time to read windows to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the window
  WindowType window = 3 [(buf.validate.field).required = true];

  // the metadata
  message Metadata {
    string field = 1;
    google.protobuf.Value value = 2;
  }

  repeated Metadata metadata = 4 [(buf.validate.field).required = true];
}

message WindowsForMetadata {
  // the windows
  repeated Window window = 1;
}


message ResultsForAlgorithmAndMetadataRead {

  // the time to read results from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];

  // the time to read results to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the algorithm to read results for
  Algorithm algorithm = 3 [(buf.validate.field).required = true];

  message Metadata {
    string field = 1;
    google.protobuf.Value value = 2;
  }

  repeated Metadata metadata = 4 [(buf.validate.field).required = true];
}

message ResultsForAlgorithmAndMetadata {
  message ResultsRow {
    
    // the time of the result, being the center of the triggering window
    google.protobuf.Timestamp time = 1 [(buf.validate.field) = {
      required: true,
      timestamp: {
        gt: {seconds: 0, nanos: 0}
      }
    }];

    // the result packet is one of these
    oneof result_data {
      // for single number results
      float single_value = 2;

      // For numeric array results
      FloatArray array_values = 3;
      
      // For structured data results (JSON-like)
      // Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
      google.protobuf.Struct struct_value = 4;
    }
  }
  repeated ResultsRow results = 1;
} 


// ------------------------ Annotation Messages ------------------------
message AnnotateWrite {
  
  // the time to annotate from
  google.protobuf.Timestamp time_from = 1 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the time to annotate to
  google.protobuf.Timestamp time_to = 2 [(buf.validate.field) = {
    required: true,
    timestamp: {
      gt: {seconds: 0, nanos: 0}
    }
  }];
  
  // the algorithms within the annotation 
  repeated Algorithm captured_algorithms = 3 [(buf.validate.field) = {required: true}];

  // the windows within the annotation
  repeated WindowType captured_windows = 4 [(buf.validate.field) = {required: true}];

  // the description of the annotation
  string description = 5 [(buf.validate.field) = {required: true}];

  // metadata to be attached to the annotation
  google.protobuf.Struct metadata = 6;

  option (buf.validate.message).cel = {
    id: "window.time_ordering",
    message: "time_to must be greater than time_from",
    expression: "this.time_to > this.time_from"
  };
}

message AnnotateResponse {}

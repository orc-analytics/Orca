// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: service.proto

package _go

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultType int32

const (
	// placeholder sentinel to make explicit that nothing was provided
	ResultType_NOT_SPECIFIED ResultType = 0
	// the algorithm produces a struct result
	ResultType_STRUCT ResultType = 1
	// the algorithm produces a single value
	ResultType_VALUE ResultType = 2
	// the algorithm produces an array of values
	ResultType_ARRAY ResultType = 3
	// the algorithm does not produce a result
	ResultType_NONE ResultType = 4
)

// Enum value maps for ResultType.
var (
	ResultType_name = map[int32]string{
		0: "NOT_SPECIFIED",
		1: "STRUCT",
		2: "VALUE",
		3: "ARRAY",
		4: "NONE",
	}
	ResultType_value = map[string]int32{
		"NOT_SPECIFIED": 0,
		"STRUCT":        1,
		"VALUE":         2,
		"ARRAY":         3,
		"NONE":          4,
	}
)

func (x ResultType) Enum() *ResultType {
	p := new(ResultType)
	*p = x
	return p
}

func (x ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (ResultType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultType.Descriptor instead.
func (ResultType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

// ResultStatus indicates the outcome of algorithm execution
type ResultStatus int32

const (
	// Algorithm failed but the error was handled gracefully
	// The system may retry or skip depending on configuration
	ResultStatus_RESULT_STATUS_HANDLED_FAILED ResultStatus = 0
	// Algorithm failed with an unexpected error
	// Requires investigation and may halt dependent processing
	ResultStatus_RESULT_STATUS_UNHANDLED_FAILED ResultStatus = 1
	// Algorithm completed successfully
	// Results are valid and can be used by dependent algorithms
	ResultStatus_RESULT_STATUS_SUCEEDED ResultStatus = 2
)

// Enum value maps for ResultStatus.
var (
	ResultStatus_name = map[int32]string{
		0: "RESULT_STATUS_HANDLED_FAILED",
		1: "RESULT_STATUS_UNHANDLED_FAILED",
		2: "RESULT_STATUS_SUCEEDED",
	}
	ResultStatus_value = map[string]int32{
		"RESULT_STATUS_HANDLED_FAILED":   0,
		"RESULT_STATUS_UNHANDLED_FAILED": 1,
		"RESULT_STATUS_SUCEEDED":         2,
	}
)

func (x ResultStatus) Enum() *ResultStatus {
	p := new(ResultStatus)
	*p = x
	return p
}

func (x ResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (ResultStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x ResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultStatus.Descriptor instead.
func (ResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

// A status enum that captures scenarios regarding a window being emmited
type WindowEmitStatus_StatusEnum int32

const (
	// When no algorithms could be found that are triggered by this window
	WindowEmitStatus_NO_TRIGGERED_ALGORITHMS WindowEmitStatus_StatusEnum = 0
	// When processing has successfully been triggered
	WindowEmitStatus_PROCESSING_TRIGGERED WindowEmitStatus_StatusEnum = 1
	// When triggering has failed
	WindowEmitStatus_TRIGGERING_FAILED WindowEmitStatus_StatusEnum = 2
)

// Enum value maps for WindowEmitStatus_StatusEnum.
var (
	WindowEmitStatus_StatusEnum_name = map[int32]string{
		0: "NO_TRIGGERED_ALGORITHMS",
		1: "PROCESSING_TRIGGERED",
		2: "TRIGGERING_FAILED",
	}
	WindowEmitStatus_StatusEnum_value = map[string]int32{
		"NO_TRIGGERED_ALGORITHMS": 0,
		"PROCESSING_TRIGGERED":    1,
		"TRIGGERING_FAILED":       2,
	}
)

func (x WindowEmitStatus_StatusEnum) Enum() *WindowEmitStatus_StatusEnum {
	p := new(WindowEmitStatus_StatusEnum)
	*p = x
	return p
}

func (x WindowEmitStatus_StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowEmitStatus_StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (WindowEmitStatus_StatusEnum) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x WindowEmitStatus_StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowEmitStatus_StatusEnum.Descriptor instead.
func (WindowEmitStatus_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3, 0}
}

// Overall health status of the processor
type HealthCheckResponse_Status int32

const (
	// Unknown status - should never be used
	HealthCheckResponse_STATUS_UNKNOWN HealthCheckResponse_Status = 0
	// Processor is healthy and ready to accept tasks
	HealthCheckResponse_STATUS_SERVING HealthCheckResponse_Status = 1
	// Processor is starting up or shutting down
	HealthCheckResponse_STATUS_TRANSITIONING HealthCheckResponse_Status = 2
	// Processor is not healthy and cannot accept tasks
	HealthCheckResponse_STATUS_NOT_SERVING HealthCheckResponse_Status = 3
)

// Enum value maps for HealthCheckResponse_Status.
var (
	HealthCheckResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_SERVING",
		2: "STATUS_TRANSITIONING",
		3: "STATUS_NOT_SERVING",
	}
	HealthCheckResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_SERVING":       1,
		"STATUS_TRANSITIONING": 2,
		"STATUS_NOT_SERVING":   3,
	}
)

func (x HealthCheckResponse_Status) Enum() *HealthCheckResponse_Status {
	p := new(HealthCheckResponse_Status)
	*p = x
	return p
}

func (x HealthCheckResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (HealthCheckResponse_Status) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x HealthCheckResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_Status.Descriptor instead.
func (HealthCheckResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15, 0}
}

// Window represents a time-bounded processing context that triggers algorithm execution. Windows are the primary input that start DAG processing flows.
type Window struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time that the window starts - nanoseconds since epoch
	// Required: Must be > Unix epoch (1970-01-01T00:00:00Z)
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// Time that the window ends - nanoseconds since epoch
	// Required: Must be > time_from (validated at message level)
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// The canonical name of the window that uniquely identifies it
	WindowTypeName string `protobuf:"bytes,3,opt,name=window_type_name,json=windowTypeName,proto3" json:"window_type_name,omitempty"`
	// The version of the window type
	WindowTypeVersion string `protobuf:"bytes,4,opt,name=window_type_version,json=windowTypeVersion,proto3" json:"window_type_version,omitempty"`
	// A unique identifier that defines where the window came from
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// Additional metadata to attach to this window
	Metadata      *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Window) Reset() {
	*x = Window{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *Window) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *Window) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *Window) GetWindowTypeName() string {
	if x != nil {
		return x.WindowTypeName
	}
	return ""
}

func (x *Window) GetWindowTypeVersion() string {
	if x != nil {
		return x.WindowTypeVersion
	}
	return ""
}

func (x *Window) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Window) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// MetadataField describes the metadata that can be carried along with windows
type MetadataField struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the metadata field
	// Examples: "AssetID"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the field
	// Examples: "Unique ID of the asset"
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataField) Reset() {
	*x = MetadataField{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataField) ProtoMessage() {}

func (x *MetadataField) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataField.ProtoReflect.Descriptor instead.
func (*MetadataField) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *MetadataField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetadataField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// WindowType defines a category of window that can trigger algorithms.
// Algorithms subscribe to window types to indicate when they should be executed.
type WindowType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the window type - must be globally unique
	// Examples: "daily", "hourly", "market_close", "event_triggered"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the algorithm. Follows basic semver and allows window
	// types to be changed over time, with traceability
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Description of the window
	// E.g. "Emitted every day, at noon"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Metadata fields that are carried along with this window type
	MetadataFields []*MetadataField `protobuf:"bytes,4,rep,name=metadataFields,proto3" json:"metadataFields,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WindowType) Reset() {
	*x = WindowType{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowType) ProtoMessage() {}

func (x *WindowType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowType.ProtoReflect.Descriptor instead.
func (*WindowType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *WindowType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WindowType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WindowType) GetMetadataFields() []*MetadataField {
	if x != nil {
		return x.MetadataFields
	}
	return nil
}

type WindowEmitStatus struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Status        WindowEmitStatus_StatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=WindowEmitStatus_StatusEnum" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowEmitStatus) Reset() {
	*x = WindowEmitStatus{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowEmitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowEmitStatus) ProtoMessage() {}

func (x *WindowEmitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowEmitStatus.ProtoReflect.Descriptor instead.
func (*WindowEmitStatus) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *WindowEmitStatus) GetStatus() WindowEmitStatus_StatusEnum {
	if x != nil {
		return x.Status
	}
	return WindowEmitStatus_NO_TRIGGERED_ALGORITHMS
}

// AlgorithmDependency defines a requirement that one algorithm has on another's results.
// These dependencies form the edges in the processing DAG.
type AlgorithmDependency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the required algorithm
	// Must reference an existing algorithm name in the system
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the required algorithm
	// Must follow semantic versioning (e.g., "1.0.0")
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Name of the processor that the algorithm is associated with
	ProcessorName string `protobuf:"bytes,3,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// Runtime of the processor that the algorithm is associated with
	ProcessorRuntime string `protobuf:"bytes,4,opt,name=processor_runtime,json=processorRuntime,proto3" json:"processor_runtime,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AlgorithmDependency) Reset() {
	*x = AlgorithmDependency{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmDependency) ProtoMessage() {}

func (x *AlgorithmDependency) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmDependency.ProtoReflect.Descriptor instead.
func (*AlgorithmDependency) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *AlgorithmDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlgorithmDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlgorithmDependency) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *AlgorithmDependency) GetProcessorRuntime() string {
	if x != nil {
		return x.ProcessorRuntime
	}
	return ""
}

// Algorithm defines a processing unit that can be executed by processors.
// Algorithms form the nodes in the processing DAG and are triggered by specific window types.
type Algorithm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the algorithm - must be globally unique
	// This identifies the algorithm across the system
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the algorithm - must follow semantic versioning
	// Allows for algorithm evolution while maintaining compatibility
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Type of window that triggers this algorithm
	// References a WindowType that will cause this algorithm to execute
	WindowType *WindowType `protobuf:"bytes,3,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	// Other algorithms that this algorithm depends on
	// The algorithm won't execute until all dependencies have completed
	// Dependencies must not form cycles - this is statically checked on processor registration
	Dependencies []*AlgorithmDependency `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// The type of result that the algorithm produces. This is specified upfront
	// rather than introspected, to allow for validation
	ResultType    ResultType `protobuf:"varint,5,opt,name=result_type,json=resultType,proto3,enum=ResultType" json:"result_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *Algorithm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Algorithm) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Algorithm) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

func (x *Algorithm) GetDependencies() []*AlgorithmDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Algorithm) GetResultType() ResultType {
	if x != nil {
		return x.ResultType
	}
	return ResultType_NOT_SPECIFIED
}

// Container for array of float values
type FloatArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []float32              `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatArray) Reset() {
	*x = FloatArray{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArray) ProtoMessage() {}

func (x *FloatArray) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArray.ProtoReflect.Descriptor instead.
func (*FloatArray) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *FloatArray) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Result of an algorithm execution
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the result execution
	Status ResultStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ResultStatus" json:"status,omitempty"`
	// The actual result data - can be either an array of floats or a structured object
	//
	// Types that are valid to be assigned to ResultData:
	//
	//	*Result_SingleValue
	//	*Result_FloatValues
	//	*Result_StructValue
	ResultData isResult_ResultData `protobuf_oneof:"result_data"`
	// Timestamp when the result was produced
	Timestamp     int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *Result) GetStatus() ResultStatus {
	if x != nil {
		return x.Status
	}
	return ResultStatus_RESULT_STATUS_HANDLED_FAILED
}

func (x *Result) GetResultData() isResult_ResultData {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *Result) GetSingleValue() float32 {
	if x != nil {
		if x, ok := x.ResultData.(*Result_SingleValue); ok {
			return x.SingleValue
		}
	}
	return 0
}

func (x *Result) GetFloatValues() *FloatArray {
	if x != nil {
		if x, ok := x.ResultData.(*Result_FloatValues); ok {
			return x.FloatValues
		}
	}
	return nil
}

func (x *Result) GetStructValue() *structpb.Struct {
	if x != nil {
		if x, ok := x.ResultData.(*Result_StructValue); ok {
			return x.StructValue
		}
	}
	return nil
}

func (x *Result) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type isResult_ResultData interface {
	isResult_ResultData()
}

type Result_SingleValue struct {
	// for single number results
	SingleValue float32 `protobuf:"fixed32,2,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type Result_FloatValues struct {
	// For numeric array results
	FloatValues *FloatArray `protobuf:"bytes,3,opt,name=float_values,json=floatValues,proto3,oneof"`
}

type Result_StructValue struct {
	// For structured data results (JSON-like)
	// Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
	StructValue *structpb.Struct `protobuf:"bytes,4,opt,name=struct_value,json=structValue,proto3,oneof"`
}

func (*Result_SingleValue) isResult_ResultData() {}

func (*Result_FloatValues) isResult_ResultData() {}

func (*Result_StructValue) isResult_ResultData() {}

// ProcessorRegistration is sent by processors when they start up to announce their capabilities
// to the orchestrator. This establishes a long-lived connection for receiving tasks.
type ProcessorRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique name of the runtime
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Language/runtime of the processor
	// Examples: "python3.9", "go1.19", "Rust4.1"
	Runtime string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// The connection string of the processor
	// e.g. grpc://localhost:5433
	ConnectionStr string `protobuf:"bytes,3,opt,name=connection_str,json=connectionStr,proto3" json:"connection_str,omitempty"`
	// Algorithms this processor can execute
	// The processor must implement all listed algorithms
	SupportedAlgorithms []*Algorithm `protobuf:"bytes,4,rep,name=supported_algorithms,json=supportedAlgorithms,proto3" json:"supported_algorithms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcessorRegistration) Reset() {
	*x = ProcessorRegistration{}
	mi := &file_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorRegistration) ProtoMessage() {}

func (x *ProcessorRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorRegistration.ProtoReflect.Descriptor instead.
func (*ProcessorRegistration) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessorRegistration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessorRegistration) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ProcessorRegistration) GetConnectionStr() string {
	if x != nil {
		return x.ConnectionStr
	}
	return ""
}

func (x *ProcessorRegistration) GetSupportedAlgorithms() []*Algorithm {
	if x != nil {
		return x.SupportedAlgorithms
	}
	return nil
}

// ProcessingTask represents a single algorithm execution request sent to a processor.
// Tasks are streamed to processors as their dependencies are satisfied.
type ProcessingTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID for this specific task execution
	// Used to correlate results and track execution state
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Algorithm to execute
	// Must be one of the algorithms the processor registered support for
	Algorithm *Algorithm `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Window that triggered this task
	// Provides the time context for the algorithm execution
	Window *Window `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	// Results from dependent algorithms
	// Contains all results that this algorithm declared dependencies on
	// All dependencies will be present when task is sent
	DependencyResults []*Result `protobuf:"bytes,4,rep,name=dependency_results,json=dependencyResults,proto3" json:"dependency_results,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProcessingTask) Reset() {
	*x = ProcessingTask{}
	mi := &file_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingTask) ProtoMessage() {}

func (x *ProcessingTask) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingTask.ProtoReflect.Descriptor instead.
func (*ProcessingTask) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessingTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ProcessingTask) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *ProcessingTask) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ProcessingTask) GetDependencyResults() []*Result {
	if x != nil {
		return x.DependencyResults
	}
	return nil
}

// ExecutionRequest provides a complete view of a processing DAG's execution
// status for a specific window. Used for monitoring and debugging.
type ExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The exec_id
	ExecId string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	// The window that triggered the algorithm
	Window *Window `protobuf:"bytes,2,opt,name=window,proto3" json:"window,omitempty"`
	// Results from dependant algorithms
	AlgorithmResults []*AlgorithmResult `protobuf:"bytes,3,rep,name=algorithm_results,json=algorithmResults,proto3" json:"algorithm_results,omitempty"`
	// The algorithms to execute
	Algorithms    []*Algorithm `protobuf:"bytes,4,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionRequest) Reset() {
	*x = ExecutionRequest{}
	mi := &file_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionRequest) ProtoMessage() {}

func (x *ExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionRequest.ProtoReflect.Descriptor instead.
func (*ExecutionRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExecutionRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ExecutionRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ExecutionRequest) GetAlgorithmResults() []*AlgorithmResult {
	if x != nil {
		return x.AlgorithmResults
	}
	return nil
}

func (x *ExecutionRequest) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

type ExecutionResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Exec ID
	ExecId string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	// The algorithn result
	AlgorithmResult *AlgorithmResult `protobuf:"bytes,3,opt,name=algorithm_result,json=algorithmResult,proto3" json:"algorithm_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecutionResult) Reset() {
	*x = ExecutionResult{}
	mi := &file_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResult) ProtoMessage() {}

func (x *ExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResult.ProtoReflect.Descriptor instead.
func (*ExecutionResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *ExecutionResult) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ExecutionResult) GetAlgorithmResult() *AlgorithmResult {
	if x != nil {
		return x.AlgorithmResult
	}
	return nil
}

// AlgorithmWindowResult Packaged algorithm and result to a window
type AlgorithmResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     *Algorithm             `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResult) Reset() {
	*x = AlgorithmResult{}
	mi := &file_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResult) ProtoMessage() {}

func (x *AlgorithmResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResult.ProtoReflect.Descriptor instead.
func (*AlgorithmResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *AlgorithmResult) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *AlgorithmResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Received      bool                   `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *Status) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// HealthCheckRequest is sent to processors to verify they are functioning
type HealthCheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp of the request in unix epoch milliseconds
	// Used to measure response latency
	Timestamp     int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *HealthCheckRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// HealthCheckResponse indicates the health status of a processor
type HealthCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current health status
	Status HealthCheckResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=HealthCheckResponse_Status" json:"status,omitempty"`
	// Optional message providing more detail about the health status
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// System metrics about the processor
	Metrics       *ProcessorMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_Status {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_STATUS_UNKNOWN
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheckResponse) GetMetrics() *ProcessorMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// ProcessorMetrics provides runtime information about a processor
type ProcessorMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of algorithms currently being executed
	ActiveTasks int32 `protobuf:"varint,1,opt,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	// Memory usage in bytes
	MemoryBytes int64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	// CPU usage percentage (0-100)
	CpuPercent float32 `protobuf:"fixed32,3,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	// Time since processor started in seconds
	UptimeSeconds int64 `protobuf:"varint,4,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessorMetrics) Reset() {
	*x = ProcessorMetrics{}
	mi := &file_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorMetrics) ProtoMessage() {}

func (x *ProcessorMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorMetrics.ProtoReflect.Descriptor instead.
func (*ProcessorMetrics) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessorMetrics) GetActiveTasks() int32 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

func (x *ProcessorMetrics) GetMemoryBytes() int64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *ProcessorMetrics) GetCpuPercent() float32 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *ProcessorMetrics) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

// ---------------------------- Data Messages ----------------------------
type WindowTypeRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowTypeRead) Reset() {
	*x = WindowTypeRead{}
	mi := &file_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowTypeRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowTypeRead) ProtoMessage() {}

func (x *WindowTypeRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowTypeRead.ProtoReflect.Descriptor instead.
func (*WindowTypeRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

type WindowTypes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Windows       []*WindowType          `protobuf:"bytes,1,rep,name=windows,proto3" json:"windows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowTypes) Reset() {
	*x = WindowTypes{}
	mi := &file_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowTypes) ProtoMessage() {}

func (x *WindowTypes) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowTypes.ProtoReflect.Descriptor instead.
func (*WindowTypes) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *WindowTypes) GetWindows() []*WindowType {
	if x != nil {
		return x.Windows
	}
	return nil
}

type AlgorithmsRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmsRead) Reset() {
	*x = AlgorithmsRead{}
	mi := &file_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmsRead) ProtoMessage() {}

func (x *AlgorithmsRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmsRead.ProtoReflect.Descriptor instead.
func (*AlgorithmsRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

type Algorithms struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     []*Algorithm           `protobuf:"bytes,1,rep,name=algorithm,proto3" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithms) Reset() {
	*x = Algorithms{}
	mi := &file_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithms) ProtoMessage() {}

func (x *Algorithms) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithms.ProtoReflect.Descriptor instead.
func (*Algorithms) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *Algorithms) GetAlgorithm() []*Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type ProcessorsRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessorsRead) Reset() {
	*x = ProcessorsRead{}
	mi := &file_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorsRead) ProtoMessage() {}

func (x *ProcessorsRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorsRead.ProtoReflect.Descriptor instead.
func (*ProcessorsRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

type Processors struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Processor     []*Processors_Processor `protobuf:"bytes,1,rep,name=processor,proto3" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Processors) Reset() {
	*x = Processors{}
	mi := &file_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Processors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processors) ProtoMessage() {}

func (x *Processors) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processors.ProtoReflect.Descriptor instead.
func (*Processors) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *Processors) GetProcessor() []*Processors_Processor {
	if x != nil {
		return x.Processor
	}
	return nil
}

type ResultsStatsRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsStatsRead) Reset() {
	*x = ResultsStatsRead{}
	mi := &file_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsStatsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsStatsRead) ProtoMessage() {}

func (x *ResultsStatsRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsStatsRead.ProtoReflect.Descriptor instead.
func (*ResultsStatsRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

type ResultsStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsStats) Reset() {
	*x = ResultsStats{}
	mi := &file_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsStats) ProtoMessage() {}

func (x *ResultsStats) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsStats.ProtoReflect.Descriptor instead.
func (*ResultsStats) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *ResultsStats) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlgorithmFieldsRead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeFrom      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	TimeTo        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	Algorithm     *Algorithm             `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmFieldsRead) Reset() {
	*x = AlgorithmFieldsRead{}
	mi := &file_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmFieldsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmFieldsRead) ProtoMessage() {}

func (x *AlgorithmFieldsRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmFieldsRead.ProtoReflect.Descriptor instead.
func (*AlgorithmFieldsRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *AlgorithmFieldsRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *AlgorithmFieldsRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *AlgorithmFieldsRead) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type AlgorithmFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         []string               `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmFields) Reset() {
	*x = AlgorithmFields{}
	mi := &file_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmFields) ProtoMessage() {}

func (x *AlgorithmFields) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmFields.ProtoReflect.Descriptor instead.
func (*AlgorithmFields) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *AlgorithmFields) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

type ResultsForAlgorithmRead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to read results from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to read results to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the algorithm to read results for
	Algorithm     *Algorithm `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithmRead) Reset() {
	*x = ResultsForAlgorithmRead{}
	mi := &file_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithmRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithmRead) ProtoMessage() {}

func (x *ResultsForAlgorithmRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithmRead.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithmRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *ResultsForAlgorithmRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *ResultsForAlgorithmRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *ResultsForAlgorithmRead) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type ResultsForAlgorithm struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Results       []*ResultsForAlgorithm_ResultsRow `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithm) Reset() {
	*x = ResultsForAlgorithm{}
	mi := &file_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithm) ProtoMessage() {}

func (x *ResultsForAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithm.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithm) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *ResultsForAlgorithm) GetResults() []*ResultsForAlgorithm_ResultsRow {
	if x != nil {
		return x.Results
	}
	return nil
}

type WindowsRead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to read windows from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to read windows to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the window
	Window        *WindowType `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsRead) Reset() {
	*x = WindowsRead{}
	mi := &file_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsRead) ProtoMessage() {}

func (x *WindowsRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsRead.ProtoReflect.Descriptor instead.
func (*WindowsRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *WindowsRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *WindowsRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *WindowsRead) GetWindow() *WindowType {
	if x != nil {
		return x.Window
	}
	return nil
}

type Windows struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the windows
	Window        []*Window `protobuf:"bytes,1,rep,name=window,proto3" json:"window,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Windows) Reset() {
	*x = Windows{}
	mi := &file_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Windows) ProtoMessage() {}

func (x *Windows) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Windows.ProtoReflect.Descriptor instead.
func (*Windows) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *Windows) GetWindow() []*Window {
	if x != nil {
		return x.Window
	}
	return nil
}

type DistinctMetadataForWindowTypeRead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to read windows from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to read windows to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the window type to read
	WindowType    *WindowType `protobuf:"bytes,3,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistinctMetadataForWindowTypeRead) Reset() {
	*x = DistinctMetadataForWindowTypeRead{}
	mi := &file_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctMetadataForWindowTypeRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctMetadataForWindowTypeRead) ProtoMessage() {}

func (x *DistinctMetadataForWindowTypeRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctMetadataForWindowTypeRead.ProtoReflect.Descriptor instead.
func (*DistinctMetadataForWindowTypeRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *DistinctMetadataForWindowTypeRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *DistinctMetadataForWindowTypeRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *DistinctMetadataForWindowTypeRead) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

type DistinctMetadataForWindowType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *structpb.ListValue    `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistinctMetadataForWindowType) Reset() {
	*x = DistinctMetadataForWindowType{}
	mi := &file_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctMetadataForWindowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctMetadataForWindowType) ProtoMessage() {}

func (x *DistinctMetadataForWindowType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctMetadataForWindowType.ProtoReflect.Descriptor instead.
func (*DistinctMetadataForWindowType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *DistinctMetadataForWindowType) GetMetadata() *structpb.ListValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type WindowsForMetadataRead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to read windows from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to read windows to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the window
	Window        *WindowType                        `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty"`
	Metadata      []*WindowsForMetadataRead_Metadata `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsForMetadataRead) Reset() {
	*x = WindowsForMetadataRead{}
	mi := &file_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsForMetadataRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsForMetadataRead) ProtoMessage() {}

func (x *WindowsForMetadataRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsForMetadataRead.ProtoReflect.Descriptor instead.
func (*WindowsForMetadataRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *WindowsForMetadataRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *WindowsForMetadataRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *WindowsForMetadataRead) GetWindow() *WindowType {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *WindowsForMetadataRead) GetMetadata() []*WindowsForMetadataRead_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type WindowsForMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the windows
	Window        []*Window `protobuf:"bytes,1,rep,name=window,proto3" json:"window,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsForMetadata) Reset() {
	*x = WindowsForMetadata{}
	mi := &file_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsForMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsForMetadata) ProtoMessage() {}

func (x *WindowsForMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsForMetadata.ProtoReflect.Descriptor instead.
func (*WindowsForMetadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *WindowsForMetadata) GetWindow() []*Window {
	if x != nil {
		return x.Window
	}
	return nil
}

type ResultsForAlgorithmAndMetadataRead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to read results from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to read results to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the algorithm to read results for
	Algorithm     *Algorithm                                     `protobuf:"bytes,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Metadata      []*ResultsForAlgorithmAndMetadataRead_Metadata `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithmAndMetadataRead) Reset() {
	*x = ResultsForAlgorithmAndMetadataRead{}
	mi := &file_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithmAndMetadataRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithmAndMetadataRead) ProtoMessage() {}

func (x *ResultsForAlgorithmAndMetadataRead) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithmAndMetadataRead.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithmAndMetadataRead) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *ResultsForAlgorithmAndMetadataRead) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadataRead) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadataRead) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadataRead) GetMetadata() []*ResultsForAlgorithmAndMetadataRead_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ResultsForAlgorithmAndMetadata struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Results       []*ResultsForAlgorithmAndMetadata_ResultsRow `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithmAndMetadata) Reset() {
	*x = ResultsForAlgorithmAndMetadata{}
	mi := &file_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithmAndMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithmAndMetadata) ProtoMessage() {}

func (x *ResultsForAlgorithmAndMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithmAndMetadata.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithmAndMetadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *ResultsForAlgorithmAndMetadata) GetResults() []*ResultsForAlgorithmAndMetadata_ResultsRow {
	if x != nil {
		return x.Results
	}
	return nil
}

// ------------------------ Annotation Messages ------------------------
type AnnotateWrite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time to annotate from
	TimeFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// the time to annotate to
	TimeTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// the algorithms within the annotation
	CapturedAlgorithms []*Algorithm `protobuf:"bytes,3,rep,name=captured_algorithms,json=capturedAlgorithms,proto3" json:"captured_algorithms,omitempty"`
	// the windows within the annotation
	CapturedWindows []*WindowType `protobuf:"bytes,4,rep,name=captured_windows,json=capturedWindows,proto3" json:"captured_windows,omitempty"`
	// the description of the annotation
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// metadata to be attached to the annotation
	Metadata      *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnnotateWrite) Reset() {
	*x = AnnotateWrite{}
	mi := &file_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnotateWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotateWrite) ProtoMessage() {}

func (x *AnnotateWrite) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotateWrite.ProtoReflect.Descriptor instead.
func (*AnnotateWrite) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *AnnotateWrite) GetTimeFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeFrom
	}
	return nil
}

func (x *AnnotateWrite) GetTimeTo() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeTo
	}
	return nil
}

func (x *AnnotateWrite) GetCapturedAlgorithms() []*Algorithm {
	if x != nil {
		return x.CapturedAlgorithms
	}
	return nil
}

func (x *AnnotateWrite) GetCapturedWindows() []*WindowType {
	if x != nil {
		return x.CapturedWindows
	}
	return nil
}

func (x *AnnotateWrite) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnnotateWrite) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AnnotateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnnotateResponse) Reset() {
	*x = AnnotateResponse{}
	mi := &file_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnotateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotateResponse) ProtoMessage() {}

func (x *AnnotateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotateResponse.ProtoReflect.Descriptor instead.
func (*AnnotateResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

type Processors_Processor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Runtime       string                 `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Processors_Processor) Reset() {
	*x = Processors_Processor{}
	mi := &file_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Processors_Processor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processors_Processor) ProtoMessage() {}

func (x *Processors_Processor) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processors_Processor.ProtoReflect.Descriptor instead.
func (*Processors_Processor) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Processors_Processor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Processors_Processor) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

type ResultsForAlgorithm_ResultsRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time of the result, being the center of the triggering window
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// the result packet is one of these
	//
	// Types that are valid to be assigned to ResultData:
	//
	//	*ResultsForAlgorithm_ResultsRow_SingleValue
	//	*ResultsForAlgorithm_ResultsRow_ArrayValues
	//	*ResultsForAlgorithm_ResultsRow_StructValue
	ResultData    isResultsForAlgorithm_ResultsRow_ResultData `protobuf_oneof:"result_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithm_ResultsRow) Reset() {
	*x = ResultsForAlgorithm_ResultsRow{}
	mi := &file_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithm_ResultsRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithm_ResultsRow) ProtoMessage() {}

func (x *ResultsForAlgorithm_ResultsRow) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithm_ResultsRow.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithm_ResultsRow) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ResultsForAlgorithm_ResultsRow) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ResultsForAlgorithm_ResultsRow) GetResultData() isResultsForAlgorithm_ResultsRow_ResultData {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *ResultsForAlgorithm_ResultsRow) GetSingleValue() float32 {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithm_ResultsRow_SingleValue); ok {
			return x.SingleValue
		}
	}
	return 0
}

func (x *ResultsForAlgorithm_ResultsRow) GetArrayValues() *FloatArray {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithm_ResultsRow_ArrayValues); ok {
			return x.ArrayValues
		}
	}
	return nil
}

func (x *ResultsForAlgorithm_ResultsRow) GetStructValue() *structpb.Struct {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithm_ResultsRow_StructValue); ok {
			return x.StructValue
		}
	}
	return nil
}

type isResultsForAlgorithm_ResultsRow_ResultData interface {
	isResultsForAlgorithm_ResultsRow_ResultData()
}

type ResultsForAlgorithm_ResultsRow_SingleValue struct {
	// for single number results
	SingleValue float32 `protobuf:"fixed32,2,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type ResultsForAlgorithm_ResultsRow_ArrayValues struct {
	// For numeric array results
	ArrayValues *FloatArray `protobuf:"bytes,3,opt,name=array_values,json=arrayValues,proto3,oneof"`
}

type ResultsForAlgorithm_ResultsRow_StructValue struct {
	// For structured data results (JSON-like)
	// Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
	StructValue *structpb.Struct `protobuf:"bytes,4,opt,name=struct_value,json=structValue,proto3,oneof"`
}

func (*ResultsForAlgorithm_ResultsRow_SingleValue) isResultsForAlgorithm_ResultsRow_ResultData() {}

func (*ResultsForAlgorithm_ResultsRow_ArrayValues) isResultsForAlgorithm_ResultsRow_ResultData() {}

func (*ResultsForAlgorithm_ResultsRow_StructValue) isResultsForAlgorithm_ResultsRow_ResultData() {}

// the metadata
type WindowsForMetadataRead_Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowsForMetadataRead_Metadata) Reset() {
	*x = WindowsForMetadataRead_Metadata{}
	mi := &file_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowsForMetadataRead_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsForMetadataRead_Metadata) ProtoMessage() {}

func (x *WindowsForMetadataRead_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsForMetadataRead_Metadata.ProtoReflect.Descriptor instead.
func (*WindowsForMetadataRead_Metadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33, 0}
}

func (x *WindowsForMetadataRead_Metadata) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *WindowsForMetadataRead_Metadata) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResultsForAlgorithmAndMetadataRead_Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithmAndMetadataRead_Metadata) Reset() {
	*x = ResultsForAlgorithmAndMetadataRead_Metadata{}
	mi := &file_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithmAndMetadataRead_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithmAndMetadataRead_Metadata) ProtoMessage() {}

func (x *ResultsForAlgorithmAndMetadataRead_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithmAndMetadataRead_Metadata.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithmAndMetadataRead_Metadata) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ResultsForAlgorithmAndMetadataRead_Metadata) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ResultsForAlgorithmAndMetadataRead_Metadata) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResultsForAlgorithmAndMetadata_ResultsRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the time of the result, being the center of the triggering window
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// the result packet is one of these
	//
	// Types that are valid to be assigned to ResultData:
	//
	//	*ResultsForAlgorithmAndMetadata_ResultsRow_SingleValue
	//	*ResultsForAlgorithmAndMetadata_ResultsRow_ArrayValues
	//	*ResultsForAlgorithmAndMetadata_ResultsRow_StructValue
	ResultData    isResultsForAlgorithmAndMetadata_ResultsRow_ResultData `protobuf_oneof:"result_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) Reset() {
	*x = ResultsForAlgorithmAndMetadata_ResultsRow{}
	mi := &file_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultsForAlgorithmAndMetadata_ResultsRow) ProtoMessage() {}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultsForAlgorithmAndMetadata_ResultsRow.ProtoReflect.Descriptor instead.
func (*ResultsForAlgorithmAndMetadata_ResultsRow) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) GetResultData() isResultsForAlgorithmAndMetadata_ResultsRow_ResultData {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) GetSingleValue() float32 {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithmAndMetadata_ResultsRow_SingleValue); ok {
			return x.SingleValue
		}
	}
	return 0
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) GetArrayValues() *FloatArray {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithmAndMetadata_ResultsRow_ArrayValues); ok {
			return x.ArrayValues
		}
	}
	return nil
}

func (x *ResultsForAlgorithmAndMetadata_ResultsRow) GetStructValue() *structpb.Struct {
	if x != nil {
		if x, ok := x.ResultData.(*ResultsForAlgorithmAndMetadata_ResultsRow_StructValue); ok {
			return x.StructValue
		}
	}
	return nil
}

type isResultsForAlgorithmAndMetadata_ResultsRow_ResultData interface {
	isResultsForAlgorithmAndMetadata_ResultsRow_ResultData()
}

type ResultsForAlgorithmAndMetadata_ResultsRow_SingleValue struct {
	// for single number results
	SingleValue float32 `protobuf:"fixed32,2,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type ResultsForAlgorithmAndMetadata_ResultsRow_ArrayValues struct {
	// For numeric array results
	ArrayValues *FloatArray `protobuf:"bytes,3,opt,name=array_values,json=arrayValues,proto3,oneof"`
}

type ResultsForAlgorithmAndMetadata_ResultsRow_StructValue struct {
	// For structured data results (JSON-like)
	// Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
	StructValue *structpb.Struct `protobuf:"bytes,4,opt,name=struct_value,json=structValue,proto3,oneof"`
}

func (*ResultsForAlgorithmAndMetadata_ResultsRow_SingleValue) isResultsForAlgorithmAndMetadata_ResultsRow_ResultData() {
}

func (*ResultsForAlgorithmAndMetadata_ResultsRow_ArrayValues) isResultsForAlgorithmAndMetadata_ResultsRow_ResultData() {
}

func (*ResultsForAlgorithmAndMetadata_ResultsRow_StructValue) isResultsForAlgorithmAndMetadata_ResultsRow_ResultData() {
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x03, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x34, 0x0a, 0x10, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07,
	0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8,
	0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x62, 0xba, 0x48, 0x5f, 0x1a, 0x5d, 0x0a, 0x14, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x1a, 0x1d, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x20, 0x3e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x55, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac,
	0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xac, 0x01,
	0x0a, 0x10, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6d, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb7, 0x01, 0x0a,
	0x13, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x81,
	0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x14, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x36, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x22, 0x77, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65,
	0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x62, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x22, 0x34, 0x0a, 0x0b, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x22,
	0x10, 0x0a, 0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x22, 0x36, 0x0a, 0x0a, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12,
	0x28, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x7c, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0x39,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x24, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8,
	0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x27, 0x0a, 0x0f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xd3,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01,
	0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x22, 0xc0, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x39, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01,
	0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8,
	0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12,
	0x2b, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x2a, 0x0a, 0x07,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xd9, 0x01, 0x0a, 0x21, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x1d, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe3, 0x02,
	0x0a, 0x16, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2,
	0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x12, 0x2b, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x4e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x80, 0x03, 0x0a, 0x22, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a,
	0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x50, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x61, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4e, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x02,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x6f, 0x77, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xed, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x6f, 0x77, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x03, 0x0a, 0x0d, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0xb2,
	0x01, 0x02, 0x2a, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x40,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0x48, 0x08,
	0xc8, 0x01, 0x01, 0xb2, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x12, 0x43, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x62, 0xba, 0x48, 0x5f, 0x1a, 0x5d, 0x0a, 0x14, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x1a, 0x1d, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x20, 0x3e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x4b, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x32, 0xb8, 0x06, 0x0a, 0x08,
	0x4f, 0x72, 0x63, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0a, 0x45, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x07, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x11, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x0c, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x0f, 0x2e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x0b, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x0f, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x10, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x11,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x1a, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x14, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x10, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x18, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x14, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x12, 0x0c, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x1a, 0x08, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x67, 0x0a, 0x21, 0x52, 0x65,
	0x61, 0x64, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x1a, 0x1e, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x13, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x22, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x1f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x41, 0x6e, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x1a, 0x11, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x82, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x63, 0x61, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x44, 0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30,
	0x01, 0x12, 0x38, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x13, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x63, 0x2d, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData []byte
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)))
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_service_proto_goTypes = []any{
	(ResultType)(0),                                     // 0: ResultType
	(ResultStatus)(0),                                   // 1: ResultStatus
	(WindowEmitStatus_StatusEnum)(0),                    // 2: WindowEmitStatus.StatusEnum
	(HealthCheckResponse_Status)(0),                     // 3: HealthCheckResponse.Status
	(*Window)(nil),                                      // 4: Window
	(*MetadataField)(nil),                               // 5: MetadataField
	(*WindowType)(nil),                                  // 6: WindowType
	(*WindowEmitStatus)(nil),                            // 7: WindowEmitStatus
	(*AlgorithmDependency)(nil),                         // 8: AlgorithmDependency
	(*Algorithm)(nil),                                   // 9: Algorithm
	(*FloatArray)(nil),                                  // 10: FloatArray
	(*Result)(nil),                                      // 11: Result
	(*ProcessorRegistration)(nil),                       // 12: ProcessorRegistration
	(*ProcessingTask)(nil),                              // 13: ProcessingTask
	(*ExecutionRequest)(nil),                            // 14: ExecutionRequest
	(*ExecutionResult)(nil),                             // 15: ExecutionResult
	(*AlgorithmResult)(nil),                             // 16: AlgorithmResult
	(*Status)(nil),                                      // 17: Status
	(*HealthCheckRequest)(nil),                          // 18: HealthCheckRequest
	(*HealthCheckResponse)(nil),                         // 19: HealthCheckResponse
	(*ProcessorMetrics)(nil),                            // 20: ProcessorMetrics
	(*WindowTypeRead)(nil),                              // 21: WindowTypeRead
	(*WindowTypes)(nil),                                 // 22: WindowTypes
	(*AlgorithmsRead)(nil),                              // 23: AlgorithmsRead
	(*Algorithms)(nil),                                  // 24: Algorithms
	(*ProcessorsRead)(nil),                              // 25: ProcessorsRead
	(*Processors)(nil),                                  // 26: Processors
	(*ResultsStatsRead)(nil),                            // 27: ResultsStatsRead
	(*ResultsStats)(nil),                                // 28: ResultsStats
	(*AlgorithmFieldsRead)(nil),                         // 29: AlgorithmFieldsRead
	(*AlgorithmFields)(nil),                             // 30: AlgorithmFields
	(*ResultsForAlgorithmRead)(nil),                     // 31: ResultsForAlgorithmRead
	(*ResultsForAlgorithm)(nil),                         // 32: ResultsForAlgorithm
	(*WindowsRead)(nil),                                 // 33: WindowsRead
	(*Windows)(nil),                                     // 34: Windows
	(*DistinctMetadataForWindowTypeRead)(nil),           // 35: DistinctMetadataForWindowTypeRead
	(*DistinctMetadataForWindowType)(nil),               // 36: DistinctMetadataForWindowType
	(*WindowsForMetadataRead)(nil),                      // 37: WindowsForMetadataRead
	(*WindowsForMetadata)(nil),                          // 38: WindowsForMetadata
	(*ResultsForAlgorithmAndMetadataRead)(nil),          // 39: ResultsForAlgorithmAndMetadataRead
	(*ResultsForAlgorithmAndMetadata)(nil),              // 40: ResultsForAlgorithmAndMetadata
	(*AnnotateWrite)(nil),                               // 41: AnnotateWrite
	(*AnnotateResponse)(nil),                            // 42: AnnotateResponse
	(*Processors_Processor)(nil),                        // 43: Processors.Processor
	(*ResultsForAlgorithm_ResultsRow)(nil),              // 44: ResultsForAlgorithm.ResultsRow
	(*WindowsForMetadataRead_Metadata)(nil),             // 45: WindowsForMetadataRead.Metadata
	(*ResultsForAlgorithmAndMetadataRead_Metadata)(nil), // 46: ResultsForAlgorithmAndMetadataRead.Metadata
	(*ResultsForAlgorithmAndMetadata_ResultsRow)(nil),   // 47: ResultsForAlgorithmAndMetadata.ResultsRow
	(*timestamppb.Timestamp)(nil),                       // 48: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                             // 49: google.protobuf.Struct
	(*structpb.ListValue)(nil),                          // 50: google.protobuf.ListValue
	(*structpb.Value)(nil),                              // 51: google.protobuf.Value
}
var file_service_proto_depIdxs = []int32{
	48, // 0: Window.time_from:type_name -> google.protobuf.Timestamp
	48, // 1: Window.time_to:type_name -> google.protobuf.Timestamp
	49, // 2: Window.metadata:type_name -> google.protobuf.Struct
	5,  // 3: WindowType.metadataFields:type_name -> MetadataField
	2,  // 4: WindowEmitStatus.status:type_name -> WindowEmitStatus.StatusEnum
	6,  // 5: Algorithm.window_type:type_name -> WindowType
	8,  // 6: Algorithm.dependencies:type_name -> AlgorithmDependency
	0,  // 7: Algorithm.result_type:type_name -> ResultType
	1,  // 8: Result.status:type_name -> ResultStatus
	10, // 9: Result.float_values:type_name -> FloatArray
	49, // 10: Result.struct_value:type_name -> google.protobuf.Struct
	9,  // 11: ProcessorRegistration.supported_algorithms:type_name -> Algorithm
	9,  // 12: ProcessingTask.algorithm:type_name -> Algorithm
	4,  // 13: ProcessingTask.window:type_name -> Window
	11, // 14: ProcessingTask.dependency_results:type_name -> Result
	4,  // 15: ExecutionRequest.window:type_name -> Window
	16, // 16: ExecutionRequest.algorithm_results:type_name -> AlgorithmResult
	9,  // 17: ExecutionRequest.algorithms:type_name -> Algorithm
	16, // 18: ExecutionResult.algorithm_result:type_name -> AlgorithmResult
	9,  // 19: AlgorithmResult.algorithm:type_name -> Algorithm
	11, // 20: AlgorithmResult.result:type_name -> Result
	3,  // 21: HealthCheckResponse.status:type_name -> HealthCheckResponse.Status
	20, // 22: HealthCheckResponse.metrics:type_name -> ProcessorMetrics
	6,  // 23: WindowTypes.windows:type_name -> WindowType
	9,  // 24: Algorithms.algorithm:type_name -> Algorithm
	43, // 25: Processors.processor:type_name -> Processors.Processor
	48, // 26: AlgorithmFieldsRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 27: AlgorithmFieldsRead.time_to:type_name -> google.protobuf.Timestamp
	9,  // 28: AlgorithmFieldsRead.algorithm:type_name -> Algorithm
	48, // 29: ResultsForAlgorithmRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 30: ResultsForAlgorithmRead.time_to:type_name -> google.protobuf.Timestamp
	9,  // 31: ResultsForAlgorithmRead.algorithm:type_name -> Algorithm
	44, // 32: ResultsForAlgorithm.results:type_name -> ResultsForAlgorithm.ResultsRow
	48, // 33: WindowsRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 34: WindowsRead.time_to:type_name -> google.protobuf.Timestamp
	6,  // 35: WindowsRead.window:type_name -> WindowType
	4,  // 36: Windows.window:type_name -> Window
	48, // 37: DistinctMetadataForWindowTypeRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 38: DistinctMetadataForWindowTypeRead.time_to:type_name -> google.protobuf.Timestamp
	6,  // 39: DistinctMetadataForWindowTypeRead.window_type:type_name -> WindowType
	50, // 40: DistinctMetadataForWindowType.metadata:type_name -> google.protobuf.ListValue
	48, // 41: WindowsForMetadataRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 42: WindowsForMetadataRead.time_to:type_name -> google.protobuf.Timestamp
	6,  // 43: WindowsForMetadataRead.window:type_name -> WindowType
	45, // 44: WindowsForMetadataRead.metadata:type_name -> WindowsForMetadataRead.Metadata
	4,  // 45: WindowsForMetadata.window:type_name -> Window
	48, // 46: ResultsForAlgorithmAndMetadataRead.time_from:type_name -> google.protobuf.Timestamp
	48, // 47: ResultsForAlgorithmAndMetadataRead.time_to:type_name -> google.protobuf.Timestamp
	9,  // 48: ResultsForAlgorithmAndMetadataRead.algorithm:type_name -> Algorithm
	46, // 49: ResultsForAlgorithmAndMetadataRead.metadata:type_name -> ResultsForAlgorithmAndMetadataRead.Metadata
	47, // 50: ResultsForAlgorithmAndMetadata.results:type_name -> ResultsForAlgorithmAndMetadata.ResultsRow
	48, // 51: AnnotateWrite.time_from:type_name -> google.protobuf.Timestamp
	48, // 52: AnnotateWrite.time_to:type_name -> google.protobuf.Timestamp
	9,  // 53: AnnotateWrite.captured_algorithms:type_name -> Algorithm
	6,  // 54: AnnotateWrite.captured_windows:type_name -> WindowType
	49, // 55: AnnotateWrite.metadata:type_name -> google.protobuf.Struct
	48, // 56: ResultsForAlgorithm.ResultsRow.time:type_name -> google.protobuf.Timestamp
	10, // 57: ResultsForAlgorithm.ResultsRow.array_values:type_name -> FloatArray
	49, // 58: ResultsForAlgorithm.ResultsRow.struct_value:type_name -> google.protobuf.Struct
	51, // 59: WindowsForMetadataRead.Metadata.value:type_name -> google.protobuf.Value
	51, // 60: ResultsForAlgorithmAndMetadataRead.Metadata.value:type_name -> google.protobuf.Value
	48, // 61: ResultsForAlgorithmAndMetadata.ResultsRow.time:type_name -> google.protobuf.Timestamp
	10, // 62: ResultsForAlgorithmAndMetadata.ResultsRow.array_values:type_name -> FloatArray
	49, // 63: ResultsForAlgorithmAndMetadata.ResultsRow.struct_value:type_name -> google.protobuf.Struct
	12, // 64: OrcaCore.RegisterProcessor:input_type -> ProcessorRegistration
	4,  // 65: OrcaCore.EmitWindow:input_type -> Window
	21, // 66: OrcaCore.ReadWindowTypes:input_type -> WindowTypeRead
	23, // 67: OrcaCore.ReadAlgorithms:input_type -> AlgorithmsRead
	25, // 68: OrcaCore.ReadProcessors:input_type -> ProcessorsRead
	27, // 69: OrcaCore.ReadResultsStats:input_type -> ResultsStatsRead
	29, // 70: OrcaCore.ReadResultFieldsForAlgorithm:input_type -> AlgorithmFieldsRead
	31, // 71: OrcaCore.ReadResultsForAlgorithm:input_type -> ResultsForAlgorithmRead
	33, // 72: OrcaCore.ReadWindows:input_type -> WindowsRead
	35, // 73: OrcaCore.ReadDistinctMetadataForWindowType:input_type -> DistinctMetadataForWindowTypeRead
	37, // 74: OrcaCore.ReadWindowsForMetadata:input_type -> WindowsForMetadataRead
	39, // 75: OrcaCore.ReadResultsForAlgorithmAndMetadata:input_type -> ResultsForAlgorithmAndMetadataRead
	41, // 76: OrcaCore.Annotate:input_type -> AnnotateWrite
	14, // 77: OrcaProcessor.ExecuteDagPart:input_type -> ExecutionRequest
	18, // 78: OrcaProcessor.HealthCheck:input_type -> HealthCheckRequest
	17, // 79: OrcaCore.RegisterProcessor:output_type -> Status
	7,  // 80: OrcaCore.EmitWindow:output_type -> WindowEmitStatus
	22, // 81: OrcaCore.ReadWindowTypes:output_type -> WindowTypes
	24, // 82: OrcaCore.ReadAlgorithms:output_type -> Algorithms
	26, // 83: OrcaCore.ReadProcessors:output_type -> Processors
	28, // 84: OrcaCore.ReadResultsStats:output_type -> ResultsStats
	30, // 85: OrcaCore.ReadResultFieldsForAlgorithm:output_type -> AlgorithmFields
	32, // 86: OrcaCore.ReadResultsForAlgorithm:output_type -> ResultsForAlgorithm
	34, // 87: OrcaCore.ReadWindows:output_type -> Windows
	36, // 88: OrcaCore.ReadDistinctMetadataForWindowType:output_type -> DistinctMetadataForWindowType
	38, // 89: OrcaCore.ReadWindowsForMetadata:output_type -> WindowsForMetadata
	40, // 90: OrcaCore.ReadResultsForAlgorithmAndMetadata:output_type -> ResultsForAlgorithmAndMetadata
	42, // 91: OrcaCore.Annotate:output_type -> AnnotateResponse
	15, // 92: OrcaProcessor.ExecuteDagPart:output_type -> ExecutionResult
	19, // 93: OrcaProcessor.HealthCheck:output_type -> HealthCheckResponse
	79, // [79:94] is the sub-list for method output_type
	64, // [64:79] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_service_proto_msgTypes[7].OneofWrappers = []any{
		(*Result_SingleValue)(nil),
		(*Result_FloatValues)(nil),
		(*Result_StructValue)(nil),
	}
	file_service_proto_msgTypes[40].OneofWrappers = []any{
		(*ResultsForAlgorithm_ResultsRow_SingleValue)(nil),
		(*ResultsForAlgorithm_ResultsRow_ArrayValues)(nil),
		(*ResultsForAlgorithm_ResultsRow_StructValue)(nil),
	}
	file_service_proto_msgTypes[43].OneofWrappers = []any{
		(*ResultsForAlgorithmAndMetadata_ResultsRow_SingleValue)(nil),
		(*ResultsForAlgorithmAndMetadata_ResultsRow_ArrayValues)(nil),
		(*ResultsForAlgorithmAndMetadata_ResultsRow_StructValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
